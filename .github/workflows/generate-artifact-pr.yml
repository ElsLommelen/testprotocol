name: On PR, build the protocol and save the result to an artifact

on:
  push:
    branches: 's[fpioa]p**'

jobs:
  build-and-save:
    runs-on: ubuntu-20.04

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }} # checkout PR head commit
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Set RENV_PATHS_ROOT
        shell: bash
        run: |
          echo "RENV_PATHS_ROOT=${{ runner.temp }}/renv" >> $GITHUB_ENV

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Setup pandoc and pandoc-citeproc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install and activate renv
        run: |
          install.packages("renv")
          renv::activate()
        shell: Rscript {0}

      - name: Get R and OS version
        id: get-version
        run: |
          cat("##[set-output name=os-version;]", sessionInfo()$running, "\n", sep = "")
          cat("##[set-output name=r-version;]", R.Version()$version.string, sep = "")
        shell: Rscript {0}

      - name: Restore Renv package cache
        uses: actions/cache@v3
        with:
          path: ${{ env.RENV_PATHS_ROOT }}
          key: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{ inputs.cache-version }}-${{ hashFiles('renv.lock') }}
          restore-keys: ${{ steps.get-version.outputs.os-version }}-${{ steps.get-version.outputs.r-version }}-${{inputs.cache-version }}-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Set branch name
        run: |
          echo "branch_name=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
  
      - name: Print branch name
        run: |
          echo 'The branch name is' '${{ env.branch_name }}'

      - name: Render protocol (only the one that is the focus of the PR) 
        run: |
          Rscript -e 'protocolhelper::render_protocol("${{ env.branch_name }}", "artifact")'
        
      - name: Archive protocol to an artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v2
        with:
          name: pr-${{ env.PR_NUMBER }}-inbo-protocol
          path: ./**/artifact/
        env:
          PR_NUMBER: ${{ github.event.number }}
